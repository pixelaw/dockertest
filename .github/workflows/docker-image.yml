name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: core

jobs:
  buildImage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      #      - name: Cache node modules
      #        uses: actions/cache@v2
      #        env:
      #          cache-name: cache-node-modules-web
      #        with:
      #          # npm cache files are stored in `~/.npm` on Linux/macOS
      #          path: web/node_modules
      #          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
      #          restore-keys: |
      #            ${{ runner.os }}-build-${{ env.cache-name }}-
      #            ${{ runner.os }}-build-
      #            ${{ runner.os }}-
      #
      #      - name: Cache node modules
      #        uses: actions/cache@v2
      #        env:
      #          cache-name: cache-node-modules-bots
      #        with:
      #          # npm cache files are stored in `~/.npm` on Linux/macOS
      #          path: bots/node_modules
      #          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
      #          restore-keys: |
      #            ${{ runner.os }}-build-${{ env.cache-name }}-
      #            ${{ runner.os }}-build-
      #            ${{ runner.os }}-
      #
      #

      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}



      - name: Build, tag, and push image
        id: build-image
        run: |
          docker build -t $REGISTRY/$PROJECTNAME:${VERSION} -t $REGISTRY/$PROJECTNAME:latest  .
          docker push $REGISTRY/$PROJECTNAME:latest
          docker push $REGISTRY/$PROJECTNAME:${VERSION}

